<?php

namespace CIR\Bundle\Entity;

use Doctrine\ORM\EntityRepository;
use CIR\Bundle\Controller;

/**
 * SumitomoSubRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SumitomoSubRepository extends EntityRepository
{
    // find reports -> inventory -> dano
    public function findInventoryByDano($dano) {

        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    s.rackno, s.diecode, s.heatcode, s.inqty, s.onhold,
                    m.dano, m.partno, m.batchno, m.indate,
                    l.shipdate
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  m.dano = :dano
            ')->setParameter('dano', $dano);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    // find reports -> inventory -> part
    public function findInventoryByPart($partno) {

        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    s.rackno, s.diecode, s.heatcode, s.inqty, s.onhold,
                    m.dano, m.partno, m.batchno, m.indate,
                    l.shipdate
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  m.partno = :partno
            ')->setParameter('partno', $partno);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // find reports -> inventory -> batch
    public function findInventoryByBatch($batchno) {

        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                   s.rackno, s.diecode, s.heatcode, s.inqty, s.onhold,
                   m.dano, m.partno, m.batchno, m.indate,
                   l.shipdate
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  m.batchno = :batchno
            ')->setParameter('batchno', $batchno);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // find reports -> inventory summary -> details
    public function totalInByDate($fromdate, $todate) {

        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.dano, m.partno, m.batchno,
                    SUM(s.inqty) as totalin
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                WHERE
                  m.indate >=  :fromdate and m.indate <= :todate
                GROUP BY
                  m.dano
                ORDER BY
                  m.partno, m.dano, m.batchno
            ')->setParameter('fromdate', $fromdate)
              ->setParameter('todate', $todate);

         try {
             return $query->getResult();
         } catch(\Doctrine\ORM\NoResultException $e) {
             return null;
         }

    }

    // finding disinct total outs
    public function distinctTotalOutByDate($fromdate, $todate) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT DISTINCT
                    m.dano, m.partno, m.batchno,
                    s.rackno, SUM(l.qtyshipped) as totalout
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  m.indate >=  :fromdate and m.indate <= :todate
                GROUP BY
                  m.dano
                ORDER BY
                  m.partno, m.dano, m.batchno
            ')->setParameter('fromdate', $fromdate)
                 ->setParameter('todate', $todate);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // finding received (in date)
    public function receivedByDate($fromdate, $todate) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                  m.dano, m.partno, m.batchno, m.indate,
                  s.rackno, s.heatcode, s.diecode, s.inqty
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                WHERE
                  m.indate >=  :fromdate and m.indate <= :todate
            ')->setParameter('fromdate', $fromdate)
              ->setParameter('todate', $todate);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // finding shipped

    public function shippedByDate($fromdate, $todate) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                  m.dano, m.partno, m.batchno,
                  s.rackno, s.heatcode, s.diecode,
                  l.shipdate, l.qtyshipped, l.blno
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  m.indate >=  :fromdate and m.indate <= :todate
            ')->setParameter('fromdate', $fromdate)
            ->setParameter('todate', $todate);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }


    // generate on hold
    public  function findOnHold($onhold) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.dano, m.partno, m.batchno,
                    s.rackno
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                WHERE
                  s.onhold = :onhold
            ')->setParameter('onhold', $onhold);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }



    public function findPartsByDano($dano) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.id, m.dano, m.partno, m.batchno,
                    s.id as subid, s.rackno, s.heatcode, s.diecode, s.inqty, s.onhold
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                WHERE
                  m.dano = :dano
            ')->setParameter(':dano',$dano);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // finding part to edit by DA and Sub Id
    public function findPartsByDanoSub($dano, $subid) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.dano, m.partno, m.batchno,
                    s.id as subid, s.rackno, s.heatcode, s.diecode, s.inqty, s.onhold
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                WHERE
                  m.dano = :dano AND s.id = :subid
            ')->setParameter(':dano',$dano)
              ->setParameter(':subid',$subid);

        try {
            return $query->getSingleResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    // find item by shipped date
    public function findShippedByDate($shipdate) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.dano, m.partno, m.batchno,
                    s.rackno, s.heatcode, s.diecode, s.inqty, s.id as subid,
                    l.qtyshipped, l.shipdate, l.id as logid, l.blno
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  l.shipdate = :shipdate
            ')->setParameter('shipdate', $shipdate);

        try {
            return $query->getResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findSubByLog($logid) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.dano, m.partno,
                    s.rackno, s.heatcode, s.diecode, s.id as subid,
                    l.qtyshipped, l.shipdate, l.id as logid, l.blno
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                JOIN
                  s.log l
                WHERE
                  l.id = :logid
            ')->setParameter('logid', $logid);

        try {
            return $query->getSingleResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function test() {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                    m.partno, SUM(s.inqty) as inqty
                FROM
                  (
                    SELECT
                      m.partno, SUM(s.inqty) as inqty
                    FROM
                      CIRBundle:SumitomoSub s
                    JOIN
                      s.main m
                    WHERE
                      s.onhold != 1
                    GROUP BY
                      s.rackno, m.partno
                  ) as tbl
                  GROUP BY
                    m.partno
            ');

        try {
            return $query->getArrayResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function searchSub() {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                  s.id as subid, m.dano, m.partno, m.batchno,
                  s.heatcode, s.diecode, s.inqty, s.rackno
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
            ');

        try {
            return $query->getArrayResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function searchSubDano($dano) {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT
                  s.id as subid, m.dano, m.partno, m.batchno,
                  s.heatcode, s.diecode, s.inqty, s.rackno
                FROM
                  CIRBundle:SumitomoSub s
                JOIN
                  s.main m
                WHERE
                  m.dano = :dano
            ')->setParameter('dano', $dano);

        try {
            return $query->getArrayResult();
        } catch(\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function testing() {
        $subq = $this->_em->createQueryBuilder()
            ->select('m.partno, SUM(s.inqty) inqty')
            ->from('CIRBundle:SumitomoSub', 's')
            ->join('s.main', 'm')
            ->where('s.onhold != 1')
            ->groupby('s.rackno, m.partno')
            ->getDQL();

        $query = $this->_em->createQueryBuilder()
            ->select('m.partno, SUM(s.inqty inqty')
            ->where($query->expr()->in('s.id',$subq));
    }
}
